//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using LSDW.Domain.Interfaces.Models;
using LSDW.Presentation.Menus.Base;

using RESX = LSDW.Presentation.Properties.Resources;

namespace LSDW.Presentation.Menus;

internal sealed partial class SettingsMenu : MenuBase
{
	public void AddMenuItems()
	{
		DealerSubMenu dealerSubMenu = new(_settings);
		var dealerSubMenuItem = AddMenu(dealerSubMenu);

		MarketSubMenu marketSubMenu = new(_settings);
		var marketSubMenuItem = AddMenu(marketSubMenu);

		PlayerSubMenu playerSubMenu = new(_settings);
		var playerSubMenuItem = AddMenu(playerSubMenu);

		TraffickingSubMenu traffickingSubMenu = new(_settings);
		var traffickingSubMenuItem = AddMenu(traffickingSubMenu);

		var saveItem = AddItem(
			title: RESX.SettingsMenu_Save_Title,
			description: RESX.SettingsMenu_Save_Description,
			activated: _settingsService.Save
			);
	}

	private class DealerSubMenu : MenuBase
	{
		private readonly ISettings _settings;

		public DealerSubMenu(ISettings settings)
		: base(RESX.SettingsMenu_Title, RESX.SettingsMenu_Dealer_SubTitle, RESX.SettingsMenu_Dealer_Description)
		{
			_settings = settings;

			var listItemDownTimeInHours = AddListItem(
				title: RESX.SettingsMenu_Dealer_DownTimeInHours_Title,
				description: RESX.SettingsMenu_Dealer_DownTimeInHours_Description,
				changed: (item, index) => _settings.Dealer.DownTimeInHours.Value = item,
				items: _settings.Dealer.GetDownTimeInHoursValues()
				);

			listItemDownTimeInHours.SelectedItem =
				_settings.Dealer.DownTimeInHours.Value;

			_settings.Dealer.DownTimeInHours.Changed += (s, e)
				=> listItemDownTimeInHours.SelectedItem = e.Value;

			var checkBoxItemHasArmor = AddCheckbox(
				title: RESX.SettingsMenu_Dealer_HasArmor_Title,
				description: RESX.SettingsMenu_Dealer_HasArmor_Description,
				changed: changed => _settings.Dealer.HasArmor.Value = changed
				);

			checkBoxItemHasArmor.Checked =
				_settings.Dealer.HasArmor.Value;
			
			_settings.Dealer.HasArmor.Changed += (s, e)
				=> checkBoxItemHasArmor.Checked = e.Value;

			var checkBoxItemHasWeapons = AddCheckbox(
				title: RESX.SettingsMenu_Dealer_HasWeapons_Title,
				description: RESX.SettingsMenu_Dealer_HasWeapons_Description,
				changed: changed => _settings.Dealer.HasWeapons.Value = changed
				);

			checkBoxItemHasWeapons.Checked =
				_settings.Dealer.HasWeapons.Value;
			
			_settings.Dealer.HasWeapons.Changed += (s, e)
				=> checkBoxItemHasWeapons.Checked = e.Value;

			var listItemMaxArmor = AddListItem(
				title: RESX.SettingsMenu_Dealer_MaxArmor_Title,
				description: RESX.SettingsMenu_Dealer_MaxArmor_Description,
				changed: (item, index) => _settings.Dealer.MaxArmor.Value = item,
				items: _settings.Dealer.GetMaxArmorValues()
				);

			listItemMaxArmor.SelectedItem =
				_settings.Dealer.MaxArmor.Value;

			_settings.Dealer.MaxArmor.Changed += (s, e)
				=> listItemMaxArmor.SelectedItem = e.Value;

			var listItemMaxHealth = AddListItem(
				title: RESX.SettingsMenu_Dealer_MaxHealth_Title,
				description: RESX.SettingsMenu_Dealer_MaxHealth_Description,
				changed: (item, index) => _settings.Dealer.MaxHealth.Value = item,
				items: _settings.Dealer.GetMaxHealthValues()
				);

			listItemMaxHealth.SelectedItem =
				_settings.Dealer.MaxHealth.Value;

			_settings.Dealer.MaxHealth.Changed += (s, e)
				=> listItemMaxHealth.SelectedItem = e.Value;
		}
	}
	private class MarketSubMenu : MenuBase
	{
		private readonly ISettings _settings;

		public MarketSubMenu(ISettings settings)
		: base(RESX.SettingsMenu_Title, RESX.SettingsMenu_Market_SubTitle, RESX.SettingsMenu_Market_Description)
		{
			_settings = settings;

			var listItemMaximumDrugPrice = AddListItem(
				title: RESX.SettingsMenu_Market_MaximumDrugPrice_Title,
				description: RESX.SettingsMenu_Market_MaximumDrugPrice_Description,
				changed: (item, index) => _settings.Market.MaximumDrugPrice.Value = item,
				items: _settings.Market.GetMaximumDrugPriceValues()
				);

			listItemMaximumDrugPrice.SelectedItem =
				_settings.Market.MaximumDrugPrice.Value;

			_settings.Market.MaximumDrugPrice.Changed += (s, e)
				=> listItemMaximumDrugPrice.SelectedItem = e.Value;

			var listItemMinimumDrugPrice = AddListItem(
				title: RESX.SettingsMenu_Market_MinimumDrugPrice_Title,
				description: RESX.SettingsMenu_Market_MinimumDrugPrice_Description,
				changed: (item, index) => _settings.Market.MinimumDrugPrice.Value = item,
				items: _settings.Market.GetMinimumDrugPriceValues()
				);

			listItemMinimumDrugPrice.SelectedItem =
				_settings.Market.MinimumDrugPrice.Value;

			_settings.Market.MinimumDrugPrice.Changed += (s, e)
				=> listItemMinimumDrugPrice.SelectedItem = e.Value;

			var listItemRefreshInterval = AddListItem(
				title: RESX.SettingsMenu_Market_RefreshInterval_Title,
				description: RESX.SettingsMenu_Market_RefreshInterval_Description,
				changed: (item, index) => _settings.Market.RefreshInterval.Value = item,
				items: _settings.Market.GetRefreshIntervalValues()
				);

			listItemRefreshInterval.SelectedItem =
				_settings.Market.RefreshInterval.Value;

			_settings.Market.RefreshInterval.Changed += (s, e)
				=> listItemRefreshInterval.SelectedItem = e.Value;

			var listItemRestockInterval = AddListItem(
				title: RESX.SettingsMenu_Market_RestockInterval_Title,
				description: RESX.SettingsMenu_Market_RestockInterval_Description,
				changed: (item, index) => _settings.Market.RestockInterval.Value = item,
				items: _settings.Market.GetRestockIntervalValues()
				);

			listItemRestockInterval.SelectedItem =
				_settings.Market.RestockInterval.Value;

			_settings.Market.RestockInterval.Changed += (s, e)
				=> listItemRestockInterval.SelectedItem = e.Value;

			var listItemSpecialOfferChance = AddListItem(
				title: RESX.SettingsMenu_Market_SpecialOfferChance_Title,
				description: RESX.SettingsMenu_Market_SpecialOfferChance_Description,
				changed: (item, index) => _settings.Market.SpecialOfferChance.Value = item,
				items: _settings.Market.GetSpecialOfferChanceValues()
				);

			listItemSpecialOfferChance.SelectedItem =
				_settings.Market.SpecialOfferChance.Value;

			_settings.Market.SpecialOfferChance.Changed += (s, e)
				=> listItemSpecialOfferChance.SelectedItem = e.Value;
		}
	}
	private class PlayerSubMenu : MenuBase
	{
		private readonly ISettings _settings;

		public PlayerSubMenu(ISettings settings)
		: base(RESX.SettingsMenu_Title, RESX.SettingsMenu_Player_SubTitle, RESX.SettingsMenu_Player_Description)
		{
			_settings = settings;

			var listItemBagSizePerLevel = AddListItem(
				title: RESX.SettingsMenu_Player_BagSizePerLevel_Title,
				description: RESX.SettingsMenu_Player_BagSizePerLevel_Description,
				changed: (item, index) => _settings.Player.BagSizePerLevel.Value = item,
				items: _settings.Player.GetBagSizePerLevelValues()
				);

			listItemBagSizePerLevel.SelectedItem =
				_settings.Player.BagSizePerLevel.Value;

			_settings.Player.BagSizePerLevel.Changed += (s, e)
				=> listItemBagSizePerLevel.SelectedItem = e.Value;

			var listItemExperienceMultiplier = AddListItem(
				title: RESX.SettingsMenu_Player_ExperienceMultiplier_Title,
				description: RESX.SettingsMenu_Player_ExperienceMultiplier_Description,
				changed: (item, index) => _settings.Player.ExperienceMultiplier.Value = item,
				items: _settings.Player.GetExperienceMultiplierValues()
				);

			listItemExperienceMultiplier.SelectedItem =
				_settings.Player.ExperienceMultiplier.Value;

			_settings.Player.ExperienceMultiplier.Changed += (s, e)
				=> listItemExperienceMultiplier.SelectedItem = e.Value;

			var checkBoxItemLooseDrugsOnDeath = AddCheckbox(
				title: RESX.SettingsMenu_Player_LooseDrugsOnDeath_Title,
				description: RESX.SettingsMenu_Player_LooseDrugsOnDeath_Description,
				changed: changed => _settings.Player.LooseDrugsOnDeath.Value = changed
				);

			checkBoxItemLooseDrugsOnDeath.Checked =
				_settings.Player.LooseDrugsOnDeath.Value;
			
			_settings.Player.LooseDrugsOnDeath.Changed += (s, e)
				=> checkBoxItemLooseDrugsOnDeath.Checked = e.Value;

			var checkBoxItemLooseDrugsWhenBusted = AddCheckbox(
				title: RESX.SettingsMenu_Player_LooseDrugsWhenBusted_Title,
				description: RESX.SettingsMenu_Player_LooseDrugsWhenBusted_Description,
				changed: changed => _settings.Player.LooseDrugsWhenBusted.Value = changed
				);

			checkBoxItemLooseDrugsWhenBusted.Checked =
				_settings.Player.LooseDrugsWhenBusted.Value;
			
			_settings.Player.LooseDrugsWhenBusted.Changed += (s, e)
				=> checkBoxItemLooseDrugsWhenBusted.Checked = e.Value;
		}
	}
	private class TraffickingSubMenu : MenuBase
	{
		private readonly ISettings _settings;

		public TraffickingSubMenu(ISettings settings)
		: base(RESX.SettingsMenu_Title, RESX.SettingsMenu_Trafficking_SubTitle, RESX.SettingsMenu_Trafficking_Description)
		{
			_settings = settings;

			var listItemBustChance = AddListItem(
				title: RESX.SettingsMenu_Trafficking_BustChance_Title,
				description: RESX.SettingsMenu_Trafficking_BustChance_Description,
				changed: (item, index) => _settings.Trafficking.BustChance.Value = item,
				items: _settings.Trafficking.GetBustChanceValues()
				);

			listItemBustChance.SelectedItem =
				_settings.Trafficking.BustChance.Value;

			_settings.Trafficking.BustChance.Changed += (s, e)
				=> listItemBustChance.SelectedItem = e.Value;

			var checkBoxItemDiscoverDealer = AddCheckbox(
				title: RESX.SettingsMenu_Trafficking_DiscoverDealer_Title,
				description: RESX.SettingsMenu_Trafficking_DiscoverDealer_Description,
				changed: changed => _settings.Trafficking.DiscoverDealer.Value = changed
				);

			checkBoxItemDiscoverDealer.Checked =
				_settings.Trafficking.DiscoverDealer.Value;
			
			_settings.Trafficking.DiscoverDealer.Changed += (s, e)
				=> checkBoxItemDiscoverDealer.Checked = e.Value;

			var listItemWantedLevel = AddListItem(
				title: RESX.SettingsMenu_Trafficking_WantedLevel_Title,
				description: RESX.SettingsMenu_Trafficking_WantedLevel_Description,
				changed: (item, index) => _settings.Trafficking.WantedLevel.Value = item,
				items: _settings.Trafficking.GetWantedLevelValues()
				);

			listItemWantedLevel.SelectedItem =
				_settings.Trafficking.WantedLevel.Value;

			_settings.Trafficking.WantedLevel.Changed += (s, e)
				=> listItemWantedLevel.SelectedItem = e.Value;
		}
	}
}
