//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using LSDW.Domain.Interfaces.Models;
using LSDW.Presentation.Menus.Base;

using RESX = LSDW.Presentation.Properties.Resources;

namespace LSDW.Presentation.Menus;

internal sealed partial class SettingsMenu : MenuBase
{
	public void AddMenuItems()
	{
		DealerSubMenu dealerSubMenu = new(_settings);
		var dealerSubMenuItem = AddMenu(dealerSubMenu);
		MarketSubMenu marketSubMenu = new(_settings);
		var marketSubMenuItem = AddMenu(marketSubMenu);
		PlayerSubMenu playerSubMenu = new(_settings);
		var playerSubMenuItem = AddMenu(playerSubMenu);
		TraffickingSubMenu traffickingSubMenu = new(_settings);
		var traffickingSubMenuItem = AddMenu(traffickingSubMenu);
	}

	private class DealerSubMenu : MenuBase
	{
		private readonly ISettings _settings;

		public DealerSubMenu(ISettings settings)
		: base(RESX.SettingsMenu_Title, RESX.SettingsMenu_Dealer_SubTitle, RESX.SettingsMenu_Dealer_Description)
		{
			_settings = settings;

			var listItemDownTimeInHours = AddListItem(
				RESX.SettingsMenu_Dealer_DownTimeInHours_Title,
				RESX.SettingsMenu_Dealer_DownTimeInHours_Description,
				(item, index) => _settings.Dealer.DownTimeInHours.Value = item,
				_settings.Dealer.GetDownTimeInHoursValues()
				);

			_settings.Dealer.DownTimeInHours.Changed += (s, e)
				=> listItemDownTimeInHours.SelectedItem = e.Value;

			var checkBoxHasArmor = AddCheckbox(
				RESX.SettingsMenu_Dealer_HasArmor_Title,
				RESX.SettingsMenu_Dealer_HasArmor_Description,
				_settings.Dealer.HasArmor.Value,
				changed => _settings.Dealer.HasArmor.Value = changed
				);

			_settings.Dealer.HasArmor.Changed += (s, e)
				=> checkBoxHasArmor.Checked = e.Value;

			var checkBoxHasWeapons = AddCheckbox(
				RESX.SettingsMenu_Dealer_HasWeapons_Title,
				RESX.SettingsMenu_Dealer_HasWeapons_Description,
				_settings.Dealer.HasWeapons.Value,
				changed => _settings.Dealer.HasWeapons.Value = changed
				);

			_settings.Dealer.HasWeapons.Changed += (s, e)
				=> checkBoxHasWeapons.Checked = e.Value;
		}
	}
	private class MarketSubMenu : MenuBase
	{
		private readonly ISettings _settings;

		public MarketSubMenu(ISettings settings)
		: base(RESX.SettingsMenu_Title, RESX.SettingsMenu_Market_SubTitle, RESX.SettingsMenu_Market_Description)
		{
			_settings = settings;

			var listItemMaximumDrugPrice = AddListItem(
				RESX.SettingsMenu_Market_MaximumDrugPrice_Title,
				RESX.SettingsMenu_Market_MaximumDrugPrice_Description,
				(item, index) => _settings.Market.MaximumDrugPrice.Value = item,
				_settings.Market.GetMaximumDrugPriceValues()
				);

			_settings.Market.MaximumDrugPrice.Changed += (s, e)
				=> listItemMaximumDrugPrice.SelectedItem = e.Value;

			var listItemMinimumDrugPrice = AddListItem(
				RESX.SettingsMenu_Market_MinimumDrugPrice_Title,
				RESX.SettingsMenu_Market_MinimumDrugPrice_Description,
				(item, index) => _settings.Market.MinimumDrugPrice.Value = item,
				_settings.Market.GetMinimumDrugPriceValues()
				);

			_settings.Market.MinimumDrugPrice.Changed += (s, e)
				=> listItemMinimumDrugPrice.SelectedItem = e.Value;

			var listItemRefreshInterval = AddListItem(
				RESX.SettingsMenu_Market_RefreshInterval_Title,
				RESX.SettingsMenu_Market_RefreshInterval_Description,
				(item, index) => _settings.Market.RefreshInterval.Value = item,
				_settings.Market.GetRefreshIntervalValues()
				);

			_settings.Market.RefreshInterval.Changed += (s, e)
				=> listItemRefreshInterval.SelectedItem = e.Value;

			var listItemRestockInterval = AddListItem(
				RESX.SettingsMenu_Market_RestockInterval_Title,
				RESX.SettingsMenu_Market_RestockInterval_Description,
				(item, index) => _settings.Market.RestockInterval.Value = item,
				_settings.Market.GetRestockIntervalValues()
				);

			_settings.Market.RestockInterval.Changed += (s, e)
				=> listItemRestockInterval.SelectedItem = e.Value;

			var listItemSpecialOfferChance = AddListItem(
				RESX.SettingsMenu_Market_SpecialOfferChance_Title,
				RESX.SettingsMenu_Market_SpecialOfferChance_Description,
				(item, index) => _settings.Market.SpecialOfferChance.Value = item,
				_settings.Market.GetSpecialOfferChanceValues()
				);

			_settings.Market.SpecialOfferChance.Changed += (s, e)
				=> listItemSpecialOfferChance.SelectedItem = e.Value;
		}
	}
	private class PlayerSubMenu : MenuBase
	{
		private readonly ISettings _settings;

		public PlayerSubMenu(ISettings settings)
		: base(RESX.SettingsMenu_Title, RESX.SettingsMenu_Player_SubTitle, RESX.SettingsMenu_Player_Description)
		{
			_settings = settings;

			var listItemBagSizePerLevel = AddListItem(
				RESX.SettingsMenu_Player_BagSizePerLevel_Title,
				RESX.SettingsMenu_Player_BagSizePerLevel_Description,
				(item, index) => _settings.Player.BagSizePerLevel.Value = item,
				_settings.Player.GetBagSizePerLevelValues()
				);

			_settings.Player.BagSizePerLevel.Changed += (s, e)
				=> listItemBagSizePerLevel.SelectedItem = e.Value;

			var listItemExperienceMultiplier = AddListItem(
				RESX.SettingsMenu_Player_ExperienceMultiplier_Title,
				RESX.SettingsMenu_Player_ExperienceMultiplier_Description,
				(item, index) => _settings.Player.ExperienceMultiplier.Value = item,
				_settings.Player.GetExperienceMultiplierValues()
				);

			_settings.Player.ExperienceMultiplier.Changed += (s, e)
				=> listItemExperienceMultiplier.SelectedItem = e.Value;

			var checkBoxLooseDrugsOnDeath = AddCheckbox(
				RESX.SettingsMenu_Player_LooseDrugsOnDeath_Title,
				RESX.SettingsMenu_Player_LooseDrugsOnDeath_Description,
				_settings.Player.LooseDrugsOnDeath.Value,
				changed => _settings.Player.LooseDrugsOnDeath.Value = changed
				);

			_settings.Player.LooseDrugsOnDeath.Changed += (s, e)
				=> checkBoxLooseDrugsOnDeath.Checked = e.Value;

			var checkBoxLooseDrugsWhenBusted = AddCheckbox(
				RESX.SettingsMenu_Player_LooseDrugsWhenBusted_Title,
				RESX.SettingsMenu_Player_LooseDrugsWhenBusted_Description,
				_settings.Player.LooseDrugsWhenBusted.Value,
				changed => _settings.Player.LooseDrugsWhenBusted.Value = changed
				);

			_settings.Player.LooseDrugsWhenBusted.Changed += (s, e)
				=> checkBoxLooseDrugsWhenBusted.Checked = e.Value;
		}
	}
	private class TraffickingSubMenu : MenuBase
	{
		private readonly ISettings _settings;

		public TraffickingSubMenu(ISettings settings)
		: base(RESX.SettingsMenu_Title, RESX.SettingsMenu_Trafficking_SubTitle, RESX.SettingsMenu_Trafficking_Description)
		{
			_settings = settings;

			var listItemBustChance = AddListItem(
				RESX.SettingsMenu_Trafficking_BustChance_Title,
				RESX.SettingsMenu_Trafficking_BustChance_Description,
				(item, index) => _settings.Trafficking.BustChance.Value = item,
				_settings.Trafficking.GetBustChanceValues()
				);

			_settings.Trafficking.BustChance.Changed += (s, e)
				=> listItemBustChance.SelectedItem = e.Value;

			var checkBoxDiscoverDealer = AddCheckbox(
				RESX.SettingsMenu_Trafficking_DiscoverDealer_Title,
				RESX.SettingsMenu_Trafficking_DiscoverDealer_Description,
				_settings.Trafficking.DiscoverDealer.Value,
				changed => _settings.Trafficking.DiscoverDealer.Value = changed
				);

			_settings.Trafficking.DiscoverDealer.Changed += (s, e)
				=> checkBoxDiscoverDealer.Checked = e.Value;

			var listItemWantedLevel = AddListItem(
				RESX.SettingsMenu_Trafficking_WantedLevel_Title,
				RESX.SettingsMenu_Trafficking_WantedLevel_Description,
				(item, index) => _settings.Trafficking.WantedLevel.Value = item,
				_settings.Trafficking.GetWantedLevelValues()
				);

			_settings.Trafficking.WantedLevel.Changed += (s, e)
				=> listItemWantedLevel.SelectedItem = e.Value;
		}
	}
}
