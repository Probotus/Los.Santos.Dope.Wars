<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetDir)LSDW.Domain.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="LSDW.Domain.Interfaces.Models" #>
<#@ output extension="Designer.cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using LSDW.Domain.Interfaces.Models;
using LSDW.Presentation.Menus.Base;

using RESX = LSDW.Presentation.Properties.Resources;

namespace LSDW.Presentation.Menus;

internal sealed partial class SettingsMenu : MenuBase
{
	public void AddMenuItems()
	{
<#
List<PropertyInfo> subMenus = GetProperties(typeof(ISettings));
foreach (PropertyInfo subMenu in subMenus) {
#>
		<#= subMenu.Name #>SubMenu <#= subMenu.Name.ToLower() #>SubMenu = new(_settings);
		var <#= subMenu.Name.ToLower() #>SubMenuItem = AddMenu(<#= subMenu.Name.ToLower() #>SubMenu);
<# } #>
	}

<#
List<PropertyInfo> menus = GetProperties(typeof(ISettings));
foreach (PropertyInfo menu in menus) {
#>
	private class <#= menu.Name #>SubMenu : MenuBase
	{
		private readonly ISettings _settings;

		public <#= menu.Name #>SubMenu(ISettings settings)
		: base(RESX.SettingsMenu_Title, RESX.SettingsMenu_<#= menu.Name #>_SubTitle, RESX.SettingsMenu_<#= menu.Name #>_Description)
		{
			_settings = settings;
<#
	List<PropertyInfo> items = GetProperties(menu.PropertyType);
	foreach(PropertyInfo item in items)
	{
		var dataType = TypeNameOrAlias(item.PropertyType.GetProperties().First().PropertyType);
		var title = $"RESX.SettingsMenu_{menu.Name}_{item.Name}_Title";
		var description = $"RESX.SettingsMenu_{menu.Name}_{item.Name}_Description";
#>
<# if (dataType == "bool") { #>

			var checkBox<#= item.Name #> = AddCheckbox(
				<#= title #>,
				<#= description #>,
				_settings.<#= menu.Name #>.<#= item.Name #>.Value,
				changed => _settings.<#= menu.Name #>.<#= item.Name #>.Value = changed
				);

			_settings.<#= menu.Name #>.<#= item.Name #>.Changed += (s, e)
				=> checkBox<#= item.Name #>.Checked = e.Value;
<# } else { #>

			var listItem<#= item.Name #> = AddListItem(
				<#= title #>,
				<#= description #>,
				(item, index) => _settings.<#= menu.Name #>.<#= item.Name #>.Value = item,
				_settings.<#= menu.Name #>.Get<#= item.Name #>Values()
				);

			_settings.<#= menu.Name #>.<#= item.Name #>.Changed += (s, e)
				=> listItem<#= item.Name #>.SelectedItem = e.Value;
<# }} #>
		}
	}
<# } #>
}
<#+
	private static List<PropertyInfo> GetProperties(Type type)
		=> type.GetProperties().ToList();

	private static string TypeNameOrAlias(Type type)
		=> _typeAlias.TryGetValue(type, out string alias) ? alias : type.Name;

	private static readonly Dictionary<Type, string> _typeAlias = new()
	{
		{ typeof(bool), "bool" },
		{ typeof(byte), "byte" },
		{ typeof(char), "char" },
		{ typeof(decimal), "decimal" },
		{ typeof(double), "double" },
		{ typeof(float), "float" },
		{ typeof(int), "int" },
		{ typeof(long), "long" },
		{ typeof(object), "object" },
		{ typeof(sbyte), "sbyte" },
		{ typeof(short), "short" },
		{ typeof(string), "string" },
		{ typeof(uint), "uint" },
		{ typeof(ulong), "ulong" },
		{ typeof(void), "void" }
	};
#>